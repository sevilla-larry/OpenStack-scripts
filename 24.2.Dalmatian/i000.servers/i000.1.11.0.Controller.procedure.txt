A.  Preparation

    A.01. ( Assumming LfS is already running )

        ###

        rm -v /sources

        ###

        # (a) VM & VB

            mkdir -v /mnt/Src/blfs.log
            mkdir -v /mnt/Src/os.{src,log}

            chmod -vR a+wt /mnt/Src/blfs.log
            chmod -vR a+wt /mnt/Src/os.{src,log}

            ln -sfv /mnt/Src/os.src /sources

            ln -sfv /mnt/Src/blfs.log /var/log/blfs
            ln -sfv /mnt/Src/os.log /var/log/os

        # (b) PC

            mkdir -pv /usr/src/os

            mkdir -pv /var/log/{blfs,os}

            chmod -vR a+wt /usr/src/os

            chmod -vR a+wt /var/log/{blfs,os}

            ln -sfv /usr/src/os /sources

        ###

        cd /sources

        ###

    A.02. Copy all script files

        copy all script files from the following to /sources

            1. i000.servers
            2. i010.support.minor
            3. i020.support.Major
            4. i100.OS.Services

            # BLfS
            5. b10.common.Xorg.and.servers
            6. b30.OpenStack.support
            7. c11.MariaDB
            8. c13.Apache

    A.03. Download packages

        ###

        wget --input-file=i010.1.wget-list.support.minor.txt                --continue --directory-prefix=/sources
        wget --input-file=i020.1.wget-list.support.Major.txt                --continue --directory-prefix=/sources

        wget --input-file=b10.01.wget-list-sysv.common.Xorg.and.servers.txt --continue --directory-prefix=/sources
        wget --input-file=b30.01.wget-list-sysv.OpenStack.support.txt       --continue --directory-prefix=/sources
        wget --input-file=c11.01.wget-list-sysv.MariaDB.txt                 --continue --directory-prefix=/sources
        wget --input-file=c13.01.wget-list-sysv.Apache.txt                  --continue --directory-prefix=/sources

        # md5sum -c md5sums.txt
        md5sum -c b10.02.md5sums.common.Xorg.and.servers.txt
        md5sum -c b30.02.md5sums.OpenStack.support.txt
        md5sum -c c11.02.md5sums.MariaDB.txt
        md5sum -c c13.02.md5sums.Apache.txt
        md5sum -c g11.02.md5sums.common.Xfce.Gnome.apps.support.txt
        md5sum -c i010.2.md5sums.support.minor.txt
        md5sum -c i020.2.md5sums.support.Major.txt
        md5sum -c i030.2.md5sums.Oslo.support.txt
        md5sum -c i040.2.md5sums.Oslo.txt
        md5sum -c i050.2.md5sums.support.others.txt
        md5sum -c i100.2.md5sums.OS.Services.txt

        ###

    A.04. Setting Up the Environment
        ( Note: change the MAKEFLAGS based on the number of threads )

        ###

        export OSLOG=/var/log/os
        export LFSLOG=/var/log/blfs
        export MAKEFLAGS="-j$(nproc)"
        export NPROC="$(nproc)"

        #export LANG=C.UTF-8

        ###

    A.05. check /etc/hosts

        # 10.0.0.11   localhost.controller    controller

B.  Support Applications - minor

    B.01. Checking Environment

        ###

        echo $OSLOG           # /var/log/os
        echo $LFSLOG          # /var/log/blfs
        echo $MAKEFLAGS       # -j$(nproc)
        echo $NPROC           # $(nproc)
        echo $LANG            # en_US.UTF-8
        echo $LC_ALL          # C.utf8

        echo $SHELL           # /bin/bash
        ls -l /bin/sh         # bash
        ls -l /usr/bin/awk    # gawk

        cd /sources

        ###

        ( display )
        root [ /sources ]#

    B.03. Generate Applications - minor

        ###

        bash i000.1.11.1.support.apps.sh
        # includes Python OpenStack Client

        ###

C.  Support Applications - Major

        ###

        # MariaDB, Apache, RabbitMQ, MemCacheD, EtcD
        bash i000.1.11.2.support.apps.sh

        ###

D.  Support Apps - Major - Configuration 1

    D.01. MariaDB configuration

        ##### as root

        ### edit /etc/mysql/my.cnf, add:

        !includedir /etc/mysql/mariadb.conf.d/

        ### create mariadb.conf.d subdirectory

        mkdir /etc/mysql/mariadb.conf.d

        ### add/create file /etc/mysql/mariadb.conf.d/99-openstack.cnf

        [mysqld]
        bind-address = 10.0.0.11

        default-storage-engine = innodb
        innodb_file_per_table = on
        max_connections = 4096
        collation-server = utf8_general_ci
        character-set-server = utf8

        ###

    D.02. Activate some modules & add mod_wsgi to Apache HTTPD

        ###

        # Copy the output of:
        mod_wsgi-express module-config

        # and Paste into:
        #
        # /etc/httpd/httpd.conf
        #

        ServerName controller

        ###
        # other Modules to be Loaded
        ###

        watchdog
        deflate
        logio
        negotiation

        # Modules to be UnLoaded

        authz_groupfile

        # apachectl -k restart

        ###

    D.03. BLfS bootscripts

        ###

        cd /mnt/Src/lfs.src/blfs-bootscripts-20240416       # VM/VB
        cd /usr/src/lfs/blfs-bootscripts-20240416           # PC

        ###

        make install-mysql      # MariaDB
        make install-httpd      # Apache
#        make install-iptables   # iptables

        reboot

        ###

E.  Support Apps - Major - Configuration 2

    E.01. MariaDB

        ###

        mysql_secure_installation

            current password                            <blank>
            Switch to unix_socket authentication        n
            set root password?                          Y
            New Password                                openstack
            Remove anonymous user?                      Y
            Disallow root login remotely?               n
            Remove test database and access to it?      Y
            Reload privilege tables now?                Y

        ###

    E.02. Check if mod_wsgi is included in Apache

        ###

        apachectl -t -D DUMP_MODULES       # check if wsgi is running

        ###

    E.03. check MemCacheD

        ###

        echo "stats settings" | ncat 10.0.0.11 11211

        ###

F.  RabbitMQ

        ### as root

        pathprepend /usr/local/rabbitmq_server-4.0.3/sbin PATH

        #
        # FAILED
        #   su - rabbitmq -c 'rabbitmq-server -detached'
        #
        rabbitmq-server -detached 

        rabbitmqctl start_app

        #                    user      password
        rabbitmqctl add_user openstack openstack

        rabbitmqctl set_permissions openstack ".*" ".*" ".*"

        ### to check

        rabbitmqctl list_users

        rabbitmqctl list_permissions

            ###

G.  KeyStone - Identity service

    G.01. KeyStone support apps

        export OSLOG=/var/log/os
        export LFSLOG=/var/log/blfs
        export MAKEFLAGS="-j$(nproc)"
        export NPROC="$(nproc)"

        echo $OSLOG           # /var/log/os
        echo $LFSLOG          # /var/log/blfs
        echo $MAKEFLAGS       # -j$(nproc)
        echo $NPROC           # $(nproc)
        echo $LANG            # en_US.UTF-8
        echo $LC_ALL          # C.utf8

        echo $SHELL           # /bin/bash
        ls -l /bin/sh         # bash
        ls -l /usr/bin/awk    # gawk

        cd /sources

        bash i000.1.11.3.support.apps.sh

    # ubuntu install, automatically created /etc/apache2/keystone.conf
    # https://docs.openstack.org/keystone/2024.2/install/keystone-install-ubuntu.html
    # https://docs.openstack.org/keystone/2024.2/install/keystone-install-obs.html

    G.02. KeyStone database

        ###

        mysql
        # or # mariadb

        ### display:
        #
        # MariaDB [(none)]
        #

        CREATE DATABASE keystone;

      # GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost'    \
      #     IDENTIFIED BY 'KEYSTONE_DBPASS';
      # GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%'            \
      #     IDENTIFIED BY 'KEYSTONE_DBPASS';

        GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost'    \
            IDENTIFIED BY 'openstack';
        GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%'            \
            IDENTIFIED BY 'openstack';

        exit;

        #
        #
        # end MariaDB
        #
        ###

    G.03. KeyStone install

        ###

        bash i151.1.sh      # KeyStone

        ###

    G.04. KeyStone configuration

        ### edit /etc/keystone/keystone.conf

        [default]
        log_dir = /var/log/keystone

        [database]
      # connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone
        connection = mysql+pymysql://keystone:openstack@controller/keystone

        [token]
        provider = fernet

        ###

        ### KeyStone Configuration
        # https://docs.openstack.org/keystone/2024.2/configuration/index.html
        # https://docs.openstack.org/keystone/2024.2/configuration/samples/index.html


        ### REBOOT

        reboot

        ###

    G.05. Populate the Identity service database

        export OSLOG=/var/log/os
        export LFSLOG=/var/log/blfs
        export MAKEFLAGS="-j$(nproc)"
        export NPROC="$(nproc)"

        echo $OSLOG           # /var/log/os
        echo $LFSLOG          # /var/log/blfs
        echo $MAKEFLAGS       # -j$(nproc)
        echo $NPROC           # $(nproc)
        echo $LANG            # en_US.UTF-8
        echo $LC_ALL          # C.utf8

        echo $SHELL           # /bin/bash
        ls -l /bin/sh         # bash
        ls -l /usr/bin/awk    # gawk

        cd /sources

        ###

        su -s /bin/sh -c "keystone-manage db_sync" keystone
    
        ###

    G.06. Initialize Fernet key repositories

        ###

        keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
        keystone-manage credential_setup --keystone-user keystone --keystone-group keystone

        ###

    G.07. Check some things

        iptables -S

            -P INPUT ACCEPT
            -P FORWARD ACCEPT
            -P OUTPUT ACCEPT

        nc -w5 -z -v controller 5000
        #ncat -w5 -z -v 10.0.0.11 5000

            Ncat: Version 7.95 ( https://nmap.org/ncat )
            Ncat: Connected to 10.0.0.11:5000.
            Ncat: 0 bytes sent, 0 bytes received in 0.0x seconds.

        lsof -i:5000

            COMMAND  PID   USER FD   TYPE DEVICE SIZE/OFF NODE NAME
            httpd    ppp   root Nu  IPv6   nnnn      0t0  TCP *:commplex-main (LISTEN)
            httpd    ppp apache Nu  IPv6   nnnn      0t0  TCP *:commplex-main (LISTEN)
            httpd    ppp apache Nu  IPv6   nnnn      0t0  TCP *:commplex-main (LISTEN)
            httpd    ppp apache Nu  IPv6   nnnn      0t0  TCP *:commplex-main (LISTEN)

        curl -i http://controller:5000/v3
        #curl -i http://10.0.0.11:5000/v3

            HTTP/1.1 200 OK
            Date: Tue, 26 Nov 2024 06:30:49 GMT
            Server: Apache/2.4.62 (Unix) mod_wsgi/5.0.2 Python/3.11
            Content-Length: 250
            Vary: X-Auth-Token
            x-openstack-request-id: req-........-....-....-....-............
            Content-Type: application/json

            {"version":
             {"id": "v3.14", "status": "stable", "updated": "2020-04-07T00:00:00Z",
              "links": [{"rel": "self", "href": "http://controller:5000/v3/"}],
              "media-types": [{"base": "application/json",
                               "type": "application/vnd.openstack.identity-v3+json"}]}}

    G.08. Bootstrap the Identity service

        ###

      # keystone-manage bootstrap --bootstrap-password ADMIN_PASS \
      #     --bootstrap-admin-url http://controller:5000/v3/ \
      #     --bootstrap-internal-url http://controller:5000/v3/ \
      #     --bootstrap-public-url http://controller:5000/v3/ \
      #     --bootstrap-region-id RegionOne
        keystone-manage bootstrap --bootstrap-password openstack \
            --bootstrap-admin-url http://controller:5000/v3/ \
            --bootstrap-internal-url http://controller:5000/v3/ \
            --bootstrap-public-url http://controller:5000/v3/ \
            --bootstrap-region-id RegionOne
        ###

#
#    G.??. Remove/exclude wsgi-test.conf
#
#        ### edit /etc/httpd/httpd.conf
#
#        ### remove/exclude test, add wsgi-keystone app
#        #Include /etc/httpd/extra/wsgi-test.conf
#        Include /etc/httpd/extra/wsgi-keystone.conf
#
#        # Verify
#        ServerName controller
#
#        ### Create the /etc/httpd/extra/wsgi-keystone.conf
#
#        Listen 5000
#
#        <VirtualHost *:5000>
#            WSGIDaemonProcess keystone-public processes=5 threads=1 user=keystone group=keystone display-name=%{GROUP}
#            WSGIProcessGroup keystone-public
#            WSGIScriptAlias / /usr/bin/keystone-wsgi-public
#            WSGIApplicationGroup %{GLOBAL}
#            WSGIPassAuthorization On
#            ErrorLogFormat "%{cu}t %M"
#            ErrorLog /var/log/httpd/keystone.log
#            CustomLog /var/log/httpd/keystone_access.log combined
#
#            #<Directory /usr/bin>
#            <Directory /usr>
#                Require all granted
#            </Directory>
#        </VirtualHost>
#
#        Alias /identity /usr/bin/keystone-wsgi-public
#        <Location /identity>
#            SetHandler wsgi-script
#            Options +ExecCGI
#
#            WSGIProcessGroup keystone-public
#            WSGIApplicationGroup %{GLOBAL}
#            WSGIPassAuthorization On
#        </Location>
#
#        ### end of /etc/httpd/extra/wsgi-keystone.conf
#

        reboot

        ### or restart Apache
        # apachectl -k restart

        ###


H.  Create a domain, projects, users, roles

    $$$ as user

    H.01. Configure the administrative account
            by setting the proper environmental variables

        $$$

        export OS_USERNAME=admin
        # export OS_PASSWORD=ADMIN_PASS
        export OS_PASSWORD=openstack
        export OS_PROJECT_NAME=admin
        export OS_USER_DOMAIN_NAME=Default
        export OS_PROJECT_DOMAIN_NAME=Default
        export OS_AUTH_URL=http://controller:5000/v3
        export OS_IDENTITY_API_VERSION=3

        $$$ Formal way to create a new domain
        $openstack domain create --description "An Example Domain" example

        $$$ Create the "service" project on "default" domain
        openstack project create --domain default \
            --description "Service Project" service

        $$$ Create "demo" project on "default" domain
        openstack project create --domain default \
            --description "Demo Project" demo

        $$$ Create "demo" user on "default" domain
        openstack user create --domain default \
            --password openstack demo

        $$$ Create "demo" role
        #openstack role create role
        openstack role create demo

        $$$ Add "demo" role to "demo" project and "demo" user
        openstack role add --project demo --user demo demo
        $$$ Note: no output

    H.02 Verify Operation

        $$$
        openstack domain list

        $$$ unset some environmental variables
        unset OS_AUTH_URL OS_PASSWORD

        $$$ request an authentication token for admin user in admin project
        openstack --os-auth-url http://controller:5000/v3 \
            --os-project-domain-name Default --os-user-domain-name Default \
            --os-project-name admin --os-username admin token issue

        $$$ request an authentication token for myuser in myproject
        openstack --os-auth-url http://controller:5000/v3 \
            --os-project-domain-name Default --os-user-domain-name Default \
            --os-project-name demo --os-username demo token issue

I.  Create OpenStack client environment scripts

    I.01. Create scripts

        $$$ create admin-openrc file (in user home directory)
            export OS_PROJECT_DOMAIN_NAME=Default
            export OS_USER_DOMAIN_NAME=Default
            export OS_PROJECT_NAME=admin
            export OS_USERNAME=admin
            export OS_PASSWORD=openstack
            export OS_AUTH_URL=http://controller:5000/v3
            export OS_IDENTITY_API_VERSION=3
            export OS_IMAGE_API_VERSION=2

        $$$ create demo-openrc file (in user home directory)
            export OS_PROJECT_DOMAIN_NAME=Default
            export OS_USER_DOMAIN_NAME=Default
            export OS_PROJECT_NAME=demo
            export OS_USERNAME=demo
            export OS_PASSWORD=openstack
            export OS_AUTH_URL=http://controller:5000/v3
            export OS_IDENTITY_API_VERSION=3
            export OS_IMAGE_API_VERSION=2

    I.02 Verify Operation

        $$$
        . admin-openrc
        openstack domain list

        $$$ request an authentication token for "admin" user in "admin" project
        . admin-openrc
        openstack token issue

        $$$ request an authentication token for "demo" user in "demo" project
        . demo-openrc
        openstack token issue

J.  Glance - Image Service

    J.01. Glance database

        ###

        mysql
        # or # mariadb

        ### display:
        #
        # MariaDB [(none)]
        #

        CREATE DATABASE glance;

      # GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' \
      #     IDENTIFIED BY 'GLANCE_DBPASS';
      # GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' \
      #     IDENTIFIED BY 'GLANCE_DBPASS';

        GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' \
            IDENTIFIED BY 'openstack';
        GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' \
            IDENTIFIED BY 'openstack';

        exit;

        #
        #
        # end MariaDB
        #
        ###

    J.02. Create the service credentials

        $$$ as user
        . admin-openrc

        $$$ create the "glance" user on "default" domain
        openstack user create --domain default  \
            --password openstack glance

        $$$ Add the "admin" role to the "glance" user and "service" project:
        openstack role add --project service --user glance admin
        $$$ Note: no display

        $$$ Create the glance service entity "image"
        openstack service create --name glance \
            --description "OpenStack Image" image

        $$$ Create the "image" service API endpoints:
        openstack endpoint create --region RegionOne \
          image public http://controller:9292
        $$$ note set ENDPOINT_ID=id
        openstack endpoint create --region RegionOne \
          image internal http://controller:9292
        openstack endpoint create --region RegionOne \
          image admin http://controller:9292

        $$$ Register quota limits (optional):
        $$$ none
        $$$ https://docs.openstack.org/oslo.limit/latest/user/usage.html#configuration

    J.03. Glance install

        ###

        export OSLOG=/var/log/os
        export LFSLOG=/var/log/blfs
        export MAKEFLAGS="-j$(nproc)"
        export NPROC="$(nproc)"

        echo $OSLOG           # /var/log/os
        echo $LFSLOG          # /var/log/blfs
        echo $MAKEFLAGS       # -j$(nproc)
        echo $NPROC           # $(nproc)
        echo $LANG            # en_US.UTF-8
        echo $LC_ALL          # C.utf8

        echo $SHELL           # /bin/bash
        ls -l /bin/sh         # bash
        ls -l /usr/bin/awk    # gawk

        cd /sources

        ###

        bash i153.1.sh

        ###

    J.04. Glance configuration

        ### edit /etc/glance/glance-api.conf

        [database]
      # connection = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance
        connection = mysql+pymysql://glance:openstack@controller/glance

        #
        # configure Identity service access
        #
        # Note: Comment out or remove any other options
        # in the [keystone_authtoken] section
        #
        [keystone_authtoken]
      # ...
        www_authenticate_uri  = http://controller:5000
            auth_url = http://controller:5000
        memcached_servers = controller:11211
        auth_type = password
            project_domain_name = default
            user_domain_name = default
            project_name = service
            username = glance
        # password = GLANCE_PASS
            password = openstack

        [paste_deploy]
      # ...
        flavor = keystone

        #
        # Note: For deployment, use OpenStack Object Storage - Swift
        #
        # For simplicity, this configuration stores images on the local file system
        # configure the local file system store and location of image files
        #
        [DEFAULT]
        # ...
        enabled_backends=fs:file

        [glance_store]
        # ...
        default_backend = fs

        # OpenStack - Ubuntu installation documentation
        [fs]
        filesystem_store_datadir = /var/lib/glance/images/

        # Alternative based on sample configuration
        [file]
        filesystem_store_datadir = /var/lib/glance/images

        # configure access to keystone
        [oslo_limit]
        auth_url = http://controller:5000
            auth_type = password
        user_domain_id = default
        username = glance
        system_scope = all
      # password = GLANCE_PASS
        password = openstack
        endpoint_id = ENDPOINT_ID
        region_name = RegionOne
      # see notes below on ENDPOINT_ID

        ###

        # https://docs.openstack.org/oslo.limit/latest/user/usage.html#configuration
        # if quotas where SET
        [DEFAULT]
      # use_keystone_limits = True
        # if NO quotas
        use_keystone_limits = False

        ### end /etc/glance/glance-api.conf

        ### Glance Configuration
        # https://docs.openstack.org/glance/2024.2/configuration/index.html

        $$$ Note: To list endpoints
        openstack endpoint list --service glance --region RegionOne

    J.05. Glance reader access

        $$$    
        $$$ Make sure that the glance account has reader access
        $$$ to system-scope resources (like limits)
        $$$

        openstack role add --user glance --user-domain default --system all reader
        $$$ Note: no display

    J.06. Populate the Image service database:

        ###

        su -s /bin/sh -c "glance-manage db_sync" glance

        ###

    J.07. Restart Glance

        reboot?

    J.08. Verify Operation

        $$$

        . admin-openrc

        wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img
        $$$ or other cloud image

        $$$ Upload the image to the Image service using
        $$$ the QCOW2 (QEMU Copy On Write 2) disk format,
        $$$ bare container format,
        $$$ and public visibility
        $$$ so all projects can access it:
        glance image-create --name "cirros" \
            --file cirros-0.4.0-x86_64-disk.img \
            --disk-format qcow2 --container-format bare \
            --visibility=public

        ### For information about the glance parameters,
        ### see Image service (glance) command-line client
        ### https://docs.openstack.org/python-glanceclient/latest/cli/details.html
        ### in the OpenStack User Guide

        ### For information about disk and container formats for images,
        ### see Disk and container formats for images
        ### https://docs.openstack.org/image-guide/image-formats.html
        ### in the OpenStack Virtual Machine Image Guide.

        $$$ Confirm upload of the image and validate attributes
        glance image-list
