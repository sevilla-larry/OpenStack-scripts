#!/bin/sh

# Generated by Grok 2025/Oct/28

### BEGIN INIT INFO
# Provides:          memcached
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $network $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: memcached daemon
# Description:       memcached is a high-performance, distributed memory
#                    object caching system
### END INIT INFO

. /lib/lsb/init-functions

# ----------------------------------------------------------------------
# Configuration
# ----------------------------------------------------------------------
[ -f /etc/sysconfig/memcached ] && . /etc/sysconfig/memcached

MEMCACHED_BIN="/usr/bin/memcached"
PIDFILE="/var/run/memcached/memcached.pid"
LOGFILE="/var/log/memcached/memcached.log"
USER="memcached"
GROUP="memcached"
PORT="11211"
MAXCONN="1024"
CACHESIZE="64"

OPTIONS="-l 10.0.0.11"
[ -f /etc/memcached/conf ] && OPTIONS="$OPTIONS $(cat /etc/memcached/conf)"
# less verbose
OPTIONS="$OPTIONS -v"
# more verbose
#OPTIONS="$OPTIONS -vv"

# ----------------------------------------------------------------------
prepare_dirs() {
    mkdir -p /var/run/memcached /var/log/memcached
    touch "$LOGFILE"
    chown -R "$USER:$GROUP" /var/run/memcached /var/log/memcached
}

start() {
    log_info_msg "Starting memcached..."
    prepare_dirs

    # Run as memcached user, daemonize, write PID, redirect output
    su -s /bin/sh "$USER" -c \
        "$MEMCACHED_BIN -d -p $PORT -u $USER -m $CACHESIZE -c $MAXCONN \
         -P \"$PIDFILE\" $OPTIONS >> \"$LOGFILE\" 2>&1"

    # Wait a moment and check if PID file exists
    sleep 1
    if [ -f "$PIDFILE" ] && kill -0 $(cat "$PIDFILE") 2>/dev/null; then
        log_success_msg
    else
        log_failure_msg
    fi
}

stop() {
    log_info_msg "Stopping memcached..."
    if [ -f "$PIDFILE" ]; then
        PID=$(cat "$PIDFILE")
        if kill -0 "$PID" 2>/dev/null; then
            kill "$PID"
            # Wait up to 5 seconds
            count=0
            while kill -0 "$PID" 2>/dev/null && [ $count -lt 50 ]; do
                sleep 0.1
                count=$((count + 1))
            done
            rm -f "$PIDFILE"
            log_success_msg
        else
            rm -f "$PIDFILE"
            log_failure_msg "PID file exists but process not running"
        fi
    else
        log_failure_msg "No PID file"
    fi
}

status() {
    if [ -f "$PIDFILE" ]; then
        PID=$(cat "$PIDFILE")
        if kill -0 "$PID" 2>/dev/null; then
            echo "memcached is running (PID: $PID)"
            return 0
        else
            echo "memcached is not running (stale PID file)"
            return 1
        fi
    else
        echo "memcached is not running"
        return 3
    fi
}

# ----------------------------------------------------------------------
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart|force-reload)
        stop
        sleep 1
        start
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|force-reload|status}"
        exit 1
        ;;
esac

exit 0
